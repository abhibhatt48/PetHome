AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation Script.

Parameters:
  BucketName:
    Type: String
    Default: pet-pic-asdf

Resources:
  # EC2Instance:
  #   Type: "AWS::EC2::Instance"
  #   Properties:
  #     ImageId: ami-053b0d53c279acc90
  #     InstanceType: t2.micro
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: "true"
  #         DeviceIndex: "0"
  #         GroupSet:
  #           - !Ref EC2SecurityGroup
  #     UserData:
  #       "Fn::Base64": !Sub |
  #         #!/bin/bash
  #         # Your custom script or commands go here
  #         echo "Hello, this is the EC2 instance user data script!"
  #         sudo apt update -y
  #         sudo apt install git
  #         sudo apt install -y curl
  #         curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
  #         sudo apt install -y nodejs
  #         sudo apt install npm -y
  #         cd home/ubuntu
  #         git clone https://rakpatel:glpat-2fAB_KUAcqD6n8anWaoD@git.cs.dal.ca/rakpatel/cloudterm.git
  #         echo "Clone completed"
  #         cd cloudterm/backend
  #         sudo npm install
  #         echo "Nm installed"
  #         sudo npm install pm2 -g
  #         echo "Pm2 installed"
  #         pm2 start index.js
  #         echo "Backend started"
  #         pm2 save
  #         cd ../frontend
  #         sudo npm install
  #         public_ip=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
  #         sudo REACT_APP_ENV=$public_ip npm run build
  #         cd build
  #         sudo iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 3000
  #         echo "Build completed"
  #         sudo npm install -g serve
  #         serve -s -l 3000
  #         echo "Frontend running on 3000"

  # EC2SecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security group to enable ssh access and opened Http on 4000 and 80 port numbers
  #     VpcId: vpc-076ca683c2a280a36
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 22
  #         ToPort: 22
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: 4000
  #         ToPort: 4000
  #         CidrIp: 0.0.0.0/0

  DynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: users
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH

  DynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: pets
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt Lambda.Arn
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: false
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${Bucket}/*"
      Bucket: !Ref Bucket

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: "true"
        Origins:
          - DomainName: !GetAtt Bucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
          CachedMethods:
            - GET
          ViewerProtocolPolicy: "redirect-to-https"
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: "none"
      Tags:
        - Key: name
          Value: csci-5409-images

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: myLambda
      Runtime: nodejs16.x
      Handler: index.handler
      Timeout: 30
      Role: arn:aws:iam::843729877421:role/LabRole
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          AWS.config.update({
            region: "us-east-1",
          });
          const DynamoDB = new AWS.DynamoDB.DocumentClient();
          const S3 = new AWS.S3();
          const Rekognition = new AWS.Rekognition();
          const TableName = "pets";

          const updatePet = async (id, search) => {
            const params = {
              TableName,
              Key: {
                id,
              },
              UpdateExpression: "SET #search = :search",
              ExpressionAttributeNames: {
                "#search": "search",
              },
              ExpressionAttributeValues: {
                ":search": search,
              },
              ReturnValues: "ALL_NEW",
            };

            return new Promise((resolve, reject) => {
              DynamoDB.update(params, (err, data) => {
                if (err) {
                  reject(err);
                } else {
                  resolve(data);
                }
              });
            });
          };

          exports.handler = async (event) => {
            const bucketName = event.Records[0].s3.bucket.name;
            const imageS3Key = event.Records[0].s3.object.key;
            const image = await S3.getObject({
              Bucket: bucketName,
              Key: imageS3Key,
            }).promise();

            const { Labels } = await Rekognition.detectLabels({
              Image: {
                Bytes: image.Body,
              },
              MaxLabels: 5,
              MinConfidence: 50,
            }).promise();

            const Tags = Labels.map((label) => label.Name);

            const d = await updatePet(imageS3Key, Tags);

            const response = {
              statusCode: 200,
              body: d,
            };
            console.log(response);
            return response;
          };


  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Lambda
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${BucketName}
